on_actions = {
	on_startup = {
		effect = {
			every_country = {
				####################		
				##Formable Nations##
				####################
				set_global_flag = puppets_allowed
				set_country_flag = hide_formable_nations
				
				###################
				##Resource Rights##
				###################

				set_variable = { state_lock = 1 }
				set_variable = { swap_sides = 0 }
				set_variable = { rt_status = 0 }

				################################
				## State Integration Variable ##
				################################
				
				set_variable = { GLO_p_pp_cost = 50 }
				set_variable = { GLO_p_comp_cost = 80 }
				set_variable = { GLO_p_res_cost = 10 }
				set_variable = { GLO_p_mp_cost = 1000 }
				set_variable = { GLO_p_inf_cost = 500 }
				set_variable = { GLO_f_comp_cost = 60 }
				set_variable = { GLO_f_res_cost = 30 }
				set_variable = { GLO_f_mp_cost = 12500 }
				set_variable = { GLO_f_inf_cost = 5000 }
				set_global_flag = hard_difficulty

				#hidden idea to make garrisons militia and irregurals free
				add_ideas = r56rp_unit_design

				# sets fuel stockpiles for every nation to full, to avoid game start stockpile buying.
				set_fuel_ratio = 1

				## prints out game start factories for stat tracking.
				IF = {
					limit = {
						num_of_factories > 25
					}
					log = "<R56RP_LOG_ET> ;[?global.date.GetDateStringNoHour];[THIS.GetTag];[?num_of_controlled_factories];[?num_of_civilian_factories];[?num_of_military_factories];[?num_of_naval_factories]"
				}
			}
			# required for china industralization
			# no touchy.
			every_state = {
				limit = {
					OR = {
						AND = {
							region = 145
							NOT = {
								state = 287 # ah yes 1k people, impassable terrain, but 2 factories.
							}
						}
						region = 200
						region = 252
						region = 248
						region = 249
						region = 155
						state = 756
						state = 609
						state = 611
						state = 612
					}
				}
				add_to_array = {
					array = global.CHI_r56rp_industralisation_states_array
					value = THIS.id
				}
			}
		}
	}

	## R56RP Logging
		
		on_monthly = {
			effect = {
				## Logging, outputs text into game.txt log file next to saves.
				## for every nation with more than 25 factories, outputs industry amount to a text file, can make a chart out of it later for aftergame.
				THIS = {
					IF = {
						limit = {
							num_of_factories > 25
						}
						log = "<R56RP_LOG_ET> ;[?global.date.GetDateStringNoHour];[THIS.GetTag];[?num_of_controlled_factories];[?num_of_civilian_factories];[?num_of_military_factories];[?num_of_naval_factories]"
					}
				}
				## outputs date monthly, and since its inside of an error log, itll append the ingame date to hosts local time.
				## easy way to track time passage.
				#random_country = {
				#	log = "<R56RP_LOG> CD"
				#}

			}
		}
		on_send_volunteers = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-V-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-V-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_war_relation_added = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-WR-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-WR-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_create_faction = {
			effect = {
				log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-FC-0;[ROOT.GetTag];[FROM.GetTag];[ROOT.GetFactionName]"
			}
		}
		on_join_faction = {
			effect = {
				log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-FJ-0;[ROOT.GetTag];[FROM.GetTag];[ROOT.GetFactionName]"
			}
		}
		on_leave_faction = {
			effect = {
				log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-FL-0;[ROOT.GetTag];[FROM.GetTag];[ROOT.GetFactionName]"
			}
		}
		on_capitulation = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-C-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-C-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_puppet = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-P-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-P-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_release_as_free = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RF-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RF-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_release_as_puppet = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RP-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RP-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_liberate = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RL-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-RL-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}
		on_annex = {
			effect = {
				IF = {
					limit = {
						is_ai = no
					}
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-A-P;[ROOT.GetTag];[FROM.GetTag]"
				}
				ELSE = {
					log = "<R56RP_LOG_FT> ;[?global.date.GetDateStringNoHour];N-A-A;[ROOT.GetTag];[FROM.GetTag]"
				}
			}
		}

	# Chinese warlords eating each other will be considered as
	# an in-code civil war, so no peace deal just a full annex.
	on_declare_war = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							original_tag = PRC
							original_tag = CHI
							original_tag = GXC
							original_tag = SHX
							original_tag = XSM
							original_tag = YUN
							original_tag = TNG
						}
						
					}
					FROM = {
						is_ai = yes
						OR = {
							original_tag = PRC
							original_tag = CHI
							original_tag = GXC
							original_tag = SHX
							original_tag = XSM
							original_tag = YUN
							original_tag = TNG
						}
					}
				}
				add_civil_war_target = FROM
				#log = "[ROOT.GetName] declared on [FROM.GetName], classed as civil war."
			}
		}
	}


	#########################################
	## State Integration Dynamic Core Cost ##
	#########################################
		on_startup = {
			effect = { #in scripted effects.
				every_state = {
					r56rp_state_integration_calculate_cost = yes
				}
			}
		}
		on_state_control_changed = {
			effect = { #in scripted effects.
				FROM.FROM = {
					r56rp_state_integration_calculate_cost = yes
				}
			}
		}

	## Fuck knows what those 3 do

	on_subject_free = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
					FROM = { tag = GER }
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	on_puppet = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
					FROM = { NOT = { tag = GER } }
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	on_liberate = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	############################
	##	German Puppets Africa ##						
	############################
		on_subject_free = {
			effect = {
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = GER_ZIM_IMP
								has_cosmetic_tag = GER_NMB
								has_cosmetic_tag = GER_TOG
								has_cosmetic_tag = GER_SAF_IMP
								has_cosmetic_tag = GER_UGA_IMP
							}
						}
						FROM = { tag = GER }
					}
					ROOT = {
						if = {
							limit = { tag = ZIM }
							set_cosmetic_tag = ZIM
						}
						if = {
							limit = { tag = NMB }
							set_cosmetic_tag = NMB
						}
						if = {
							limit = { tag = TOG }
							set_cosmetic_tag = TOG
						}
						if = {
							limit = { tag = SAF }
							set_cosmetic_tag = SAF
						}
						if = {
							limit = { tag = UGA }
							set_cosmetic_tag = UGA
						}
					}
				}
			
			}
		
		}
		on_puppet = {
		
			effect = {
			
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = GER_ZIM_IMP
								has_cosmetic_tag = GER_NMB
								has_cosmetic_tag = GER_TOG
								has_cosmetic_tag = GER_SAF_IMP
								has_cosmetic_tag = GER_UGA_IMP
							}
						}
						FROM = { NOT = { tag = GER } }
					}
					ROOT = {
						if = {
							limit = { tag = ZIM }
							set_cosmetic_tag = ZIM
						}
						if = {
							limit = { tag = NMB }
							set_cosmetic_tag = NMB
						}
						if = {
							limit = { tag = TOG }
							set_cosmetic_tag = TOG
						}
						if = {
							limit = { tag = SAF }
							set_cosmetic_tag = SAF
						}
						if = {
							limit = { tag = UGA }
							set_cosmetic_tag = UGA
						}
					}
				}
			
			}
		
		}
		on_liberate = {
			effect = {
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = GER_ZIM_IMP
								has_cosmetic_tag = GER_NMB
								has_cosmetic_tag = GER_TOG
								has_cosmetic_tag = GER_SAF_IMP
								has_cosmetic_tag = GER_UGA_IMP
							}
						}
					}
					ROOT = {
						if = {
							limit = { tag = ZIM }
							set_cosmetic_tag = ZIM
						}
						if = {
							limit = { tag = NMB }
							set_cosmetic_tag = NMB
						}
						if = {
							limit = { tag = TOG }
							set_cosmetic_tag = TOG
						}
						if = {
							limit = { tag = SAF }
							set_cosmetic_tag = SAF
						}
						if = {
							limit = { tag = UGA }
							set_cosmetic_tag = UGA
						}

					}
				}
			
			}
		
		}
	############################
	##	French Puppets Africa ##						
	############################
		on_subject_free = {
			effect = {
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = FRA_MEA
								has_cosmetic_tag = FRA_AFR
								has_cosmetic_tag = FRA_MAFR
								has_cosmetic_tag = FRA_EAFR
							}
						}
						FROM = { tag = FRA }
					}
					ROOT = {
						if = {
							limit = { tag = MLI }
							set_cosmetic_tag = MLI
						}
						if = {
							limit = { tag = SYR }
							set_cosmetic_tag = SYR
						}
						if = {
							limit = { tag = CHA }
							set_cosmetic_tag = CHA
						}
						if = {
							limit = { tag = MAD }
							set_cosmetic_tag = MAD
						}
					}
				}
			
			}
		
		}
		on_puppet = {
		
			effect = {
			
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = FRA_MEA
								has_cosmetic_tag = FRA_AFR
								has_cosmetic_tag = FRA_MAFR
								has_cosmetic_tag = FRA_EAFR
							}
						}
						FROM = { NOT = { tag = FRA } }
					}
					ROOT = {
						if = {
							limit = { tag = MLI }
							set_cosmetic_tag = MLI
						}
						if = {
							limit = { tag = SYR }
							set_cosmetic_tag = SYR
						}
						if = {
							limit = { tag = CHA }
							set_cosmetic_tag = CHA
						}
						if = {
							limit = { tag = MAD }
							set_cosmetic_tag = MAD
						}
					}
				}
			
			}
		
		}
		on_liberate = {
			effect = {
				if = {
					limit = {
						ROOT = {
							OR = {
								has_cosmetic_tag = FRA_MEA
								has_cosmetic_tag = FRA_AFR
								has_cosmetic_tag = FRA_MAFR
								has_cosmetic_tag = FRA_EAFR
							}
						}
					}
					ROOT = {
						if = {
							limit = { tag = MLI }
							set_cosmetic_tag = MLI
						}
						if = {
							limit = { tag = SYR }
							set_cosmetic_tag = SYR
						}
						if = {
							limit = { tag = CHA }
							set_cosmetic_tag = CHA
						}
						if = {
							limit = { tag = MAD }
							set_cosmetic_tag = MAD
						}
					}
				}
			
			}
		
		}
	####################
	## State Transfer ##
	####################
		on_startup = { 
			effect = {
				every_country = {
					limit = {
						is_ai = no
					}
					set_variable = { ROOT.marked_states = 0 }
				}
			}
		}

	########################
	## Axis Pack Reminder ##
	########################
		on_startup = {
			effect = {
				every_country = {
					limit = {
						has_dlc = "Axis Armor Pack"
						has_game_rule = {
							rule = r56rp_enable_bakedinrules
							option = ENABLED
						}
					}
					set_country_flag = r56rp_disable_axis_armor_pack_flag
					activate_mission = r56rp_disable_axis_armor_pack
				}
				random_country = {
					limit = {
						has_dlc = "Axis Armor Pack"
						has_game_rule = {
							rule = r56rp_enable_bakedinrules
							option = ENABLED
						}
					}
					news_event = { 
						id = r56rp_rules_event.1 
					}
				}
			}
		}

	#######################################
	## Unlock Techs for Research Changes ##
	#######################################
		on_startup = { #warlider being lazy/genius
			effect = {
				every_country = {
					limit = {
						OR = {
							has_tech = shocktroops
							has_tech = marines
							has_tech = tech_mountaineers
							has_tech = paratroopers
						}
						NOT = {
							has_tech = tech_special_forces
						}
					}
					hidden_effect = {
						set_technology = {
							tech_special_forces = 1
							popup = no
						}
					}
				}
				every_country = {
					limit = {
						OR = {
							has_tech = shocktroops
							has_tech = marines
							has_tech = tech_mountaineers
							has_tech = jaegers
							has_tech = desertinfantry_at
							has_tech = jungletroops
						}
						NOT = {
							has_tech = tech_support
						}
					}
					hidden_effect = {
						set_technology = {
							tech_support = 1
							popup = no
						}
					}
				}
				every_country = {
					limit = {
						OR = {
							has_tech = basic_naval_mines
							has_tech = submarine_mine_laying
						}
					}
					hidden_effect = {
						set_technology = {
							basic_naval_mines = 0
							popup = no
						}
						set_technology = {
							submarine_mine_laying = 0
							popup = no
						}
					}
				}
				every_country = {
					limit = {
						has_tech = early_bombs
					}
					hidden_effect = {
						set_technology = {
							photo_reconnaisance = 1
							popup = no
						}
					}
				}
				
			}
		}
	####################
	## Embargo - Mod+ ##
	####################
		on_annex = {
			effect = {
				every_country = {
					limit = {
						FROM = {
							is_in_array = {
								array = PREV.embargoed_countries
								value = THIS.id
							}
						}
					}
				}
			}
		}

	####################
	## More Mapmodes+ ##
	####################

		on_weekly = { 
			effect = {
				if = {
					limit = {
						owns_state = 1
					}
					more_mapmodes_update_custom_map_modes_effects = yes
				}
			}
		}

		# ROOT is winner, FROM gets annexed
		on_annex = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is subject, FROM is overlord
		on_subject_annexed = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is new controller, FROM is old controller, FROM.FROM is state ID
		on_state_control_changed = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is winner, FROM is loser
		on_peaceconference_ended = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the nation being liberated, FROM the leader of the liberators
		on_liberate = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the released nation, FROM the releaser
		on_release_as_free = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the released subject, FROM the former overlord
		on_subject_free = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the released nation, FROM the releaser
		on_release_as_puppet = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		on_war = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		on_peace = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the loser, FROM is the winner
		on_capitulation = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		on_uncapitulation = {
			effect = {
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}

		# ROOT is the country that guarantees, FROM is the country that gets guaranteed
		on_guarantee = {
			effect = {
				force_update_map_mode = {
					mapmode = more_mapmodes_guarantees_map_mode
				}
			}
		}

	#######################################
	## Subject Freedom/Subject Decisions ##
	#######################################

		on_subject_free = { #ROOT is subject FROM is previous overlord
			effect = {
				if = {
					limit = {
					has_idea = subject_military_restrictions
					}
				remove_ideas = subject_military_restrictions
				}
				if = {
					limit = {
						#AND = {
						has_idea = cant_train_divisions
						#NOT = { has_idea = subject_military_restrictions }
						#}
					}
					country_lock_all_division_template = no
					remove_ideas = cant_train_divisions
				}
			}
		}
		
		on_monthly = {
			effect = {
				if = {
					limit = {
						AND = {
							has_idea = cant_train_divisions
							NOT = { has_idea = subject_military_restrictions }
						}
					}
				country_lock_all_division_template = no
				remove_ideas = cant_train_divisions
				}
			}
		}

		on_declare_war = {
			effect = {
				if = {
					limit = {
						OR = {
							tag = NOR
							tag = SWE
							tag = DEN
							tag = FIN
						}
						FROM = { tag = SOV }
					}
					SOV = {
						add_ideas = r56rp_SOV_defence_against_nordics
					}
				}
			}
		}

	########################
	## CONTINENT DISABLED ##
	########################

		on_startup = {
			effect = {
			# EUROPE
				IF = {
					limit = {
						has_game_rule = {
							rule = r56rp_disable_continents_game_rule_europe
							option = DISABLED
						}
					}
					
					every_state = {
						limit = {
							is_on_continent = europe
							NOT = {
								is_owned_and_controlled_by = SOV
							}
						}
						remove_core_of = THIS
						add_core_of = X01
						transfer_state_to = X01
						set_demilitarized_zone = yes
						X01 = {
							country_lock_all_division_template = yes
							add_ideas = r56rp_disabled_continent
							load_focus_tree = r56rp_dummy_tree
						}
						
					}
				}
			# AFRICA
				IF = {
					limit = {
						has_game_rule = {
							rule = r56rp_disable_continents_game_rule_africa
							option = DISABLED
						}
					}

					every_state = {
						limit = {
							is_on_continent = africa
						}

						for_loop_effect = {
								end = 3
								value = temp_0001
							every_country = { #gotta trigger multiple times otherwise it misses cores.
								PREV = {
									remove_core_of = PREV
								}
							}
						}
						add_core_of = X02
						transfer_state_to = X02
						set_demilitarized_zone = yes
						X02 = {
							country_lock_all_division_template = yes
							add_ideas = r56rp_disabled_continent
							load_focus_tree = r56rp_dummy_tree
						}
						
					}
				}
			# ASIA
				IF = {
					limit = {
						has_game_rule = {
							rule = r56rp_disable_continents_game_rule_asia
							option = DISABLED
						}
					}

					every_state = {
						limit = {
							is_on_continent = asia
							NOT = {
								is_core_of = SOV
							}
						}

						for_loop_effect = {
								end = 3
								value = temp_0001
							every_country = { #gotta trigger multiple times otherwise it misses cores.
								PREV = {
									remove_core_of = PREV
								}
							}
						}
						add_core_of = X03
						transfer_state_to = X03
						set_demilitarized_zone = yes
						X03 = {
							country_lock_all_division_template = yes
							add_ideas = r56rp_disabled_continent
							load_focus_tree = r56rp_dummy_tree
						}
						
					}
				}
			# SOUTH AMERICA
				IF = {
					limit = {
						has_game_rule = {
							rule = r56rp_disable_continents_game_rule_south_america
							option = DISABLED
						}
					}
					every_state = {
						limit = {
							is_on_continent = south_america
						}

						for_loop_effect = {
								end = 3
								value = temp_0001
							every_country = { #gotta trigger multiple times otherwise it misses cores.
								PREV = {
									remove_core_of = PREV
								}
							}
						}
						add_core_of = X04
						transfer_state_to = X04
						set_demilitarized_zone = yes
						X04 = {
							country_lock_all_division_template = yes
							add_ideas = r56rp_disabled_continent
							load_focus_tree = r56rp_dummy_tree
						}
						
					}
				}
			# NORTH AMERICA
				IF = {
					limit = {
						has_game_rule = {
							rule = r56rp_disable_continents_game_rule_north_america
							option = DISABLED
						}
					}
					every_state = {
						limit = {
							is_on_continent = north_america
						}
						USA = {
							release = HAW
							release = GUM
							release = PUE
						}
						685 = { transfer_state_to = PAN }
						for_loop_effect = {
								end = 3
								value = temp_0001
							every_country = { #gotta trigger multiple times otherwise it misses cores.
								PREV = {
									remove_core_of = PREV
								}
							}
						}
						add_core_of = X05
						transfer_state_to = X05
						set_demilitarized_zone = yes
						X05 = {
							country_lock_all_division_template = yes
							add_ideas = r56rp_disabled_continent
							load_focus_tree = r56rp_dummy_tree
						}
						
					}
				}
			}
		}



	##############################
	## JAPAN-USA ISLAND HOPPING ##
	##############################

		#
		#on_state_control_changed = {
		#	effect = {
		#		# ROOT is new controller, 
		#		# FROM is old controller, 
		#		# FROM.FROM is state ID.
		#		if = {
		#			limit = {
		#				ROOT
		#			}
		#		}
		#	}
		#	
		#}

	#############################
	## ROC CORRUPTION "REWORK" ##
	#############################

		on_war_relation_added = {
			effect = {
				if = {
					limit = {
						OR = {
							AND = {
								FROM = { 
									original_tag = JAP
								}
								ROOT = {
									has_power_balance = {
										id = CHI_r56rp_corruption_power_balance
									}
								}
							}
							AND = {
								FROM = { 
									has_power_balance = {
										id = CHI_r56rp_corruption_power_balance
									}
								}
								ROOT = {
									original_tag = JAP
								}
							}
						}
						NOT = {
							has_country_flag = r56rp_anti_corruption_war_event_fired
						}

					}
					CHI = {
						country_event = { id = r56rp_kmt.1 }
						set_country_flag = r56rp_anti_corruption_war_event_fired
					}
				}
			}
		}

		on_peace = {
			effect = {
				if = {
					limit = {
						THIS = {
							has_power_balance = {
								id = CHI_r56rp_corruption_power_balance
							}
						}
						NOT = {
							has_country_flag = r56rp_anti_corruption_war_event_fired_peace
						}
					}
					THIS = {
						country_event = { id = r56rp_kmt.2 }
						set_country_flag = r56rp_anti_corruption_war_event_fired_peace
					}
				}
			}
		}

		

}
