on_actions={
	on_startup = {
		effect = {
			every_country = {
				####################		
				##Formable Nations##
				####################
				set_global_flag = puppets_allowed
				set_country_flag = hide_formable_nations
				
				###################
				##Resource Rights##
				###################

				set_variable = { state_lock = 1 }
				set_variable = { swap_sides = 0 }
				set_variable = { rt_status = 0 }

				################################
				## State Integration Variable ##
				################################
				
				set_variable = { GLO_p_pp_cost = 50 }
				set_variable = { GLO_p_comp_cost = 80 }
				set_variable = { GLO_p_res_cost = 10 }
				set_variable = { GLO_p_mp_cost = 1000 }
				set_variable = { GLO_p_inf_cost = 500 }
				set_variable = { GLO_f_comp_cost = 60 }
				set_variable = { GLO_f_res_cost = 30 }
				set_variable = { GLO_f_mp_cost = 12500 }
				set_variable = { GLO_f_inf_cost = 5000 }
				set_global_flag = hard_difficulty

				#hidden idea to make garrisons militia and irregurals free
				add_ideas = r56rp_unit_design 

			}
		}
	}
	#########################################
	## State Integration Dynamic Core Cost ##
	#########################################
	on_startup = {
		effect = { #in scripted effects.
			every_state = {
				r56rp_state_integration_calculate_cost = yes
			}
		}
	}
	#on_monthly = {
	#	effect = { #in scripted effects.
	#		every_state = {
	#			r56rp_state_integration_calculate_cost = yes
	#		}
	#	}
	#}

	on_subject_free = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
					FROM = { tag = GER }
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	on_puppet = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
					FROM = { NOT = { tag = GER } }
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	on_liberate = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = EST_BRLI
							has_cosmetic_tag = LIT_BRLI
							has_cosmetic_tag = LAT_BRLI
							has_cosmetic_tag = POL_BRLI
							has_cosmetic_tag = BLR_BRLI
							has_cosmetic_tag = UKR_BRLI
						}
					}
				}
				ROOT = {
					if = {
						limit = { tag = EST }
						set_cosmetic_tag = EST
					}
					if = {
						limit = { tag = LIT }
						set_cosmetic_tag = LIT
					}
					if = {
						limit = { tag = LAT }
						set_cosmetic_tag = LAT
					}
					if = {
						limit = { tag = POL }
						set_cosmetic_tag = POL
					}
					if = {
						limit = { tag = UKR }
						set_cosmetic_tag = UKR
					}
					if = {
						limit = { tag = BLR }
						set_cosmetic_tag = BLR
					}
				}
			}
		
		}
	
	}
	############################
	##	German Puppets Africa ##						
	############################
	on_subject_free = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = GER_ZIM_IMP
							has_cosmetic_tag = GER_NMB
							has_cosmetic_tag = GER_TOG
							has_cosmetic_tag = GER_SAF_IMP
							has_cosmetic_tag = GER_UGA_IMP
						}
					}
					FROM = { tag = GER }
				}
				ROOT = {
					if = {
						limit = { tag = ZIM }
						set_cosmetic_tag = ZIM
					}
					if = {
						limit = { tag = NMB }
						set_cosmetic_tag = NMB
					}
					if = {
						limit = { tag = TOG }
						set_cosmetic_tag = TOG
					}
					if = {
						limit = { tag = SAF }
						set_cosmetic_tag = SAF
					}
					if = {
						limit = { tag = UGA }
						set_cosmetic_tag = UGA
					}
				}
			}
		
		}
	
	}
	on_puppet = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = GER_ZIM_IMP
							has_cosmetic_tag = GER_NMB
							has_cosmetic_tag = GER_TOG
							has_cosmetic_tag = GER_SAF_IMP
							has_cosmetic_tag = GER_UGA_IMP
						}
					}
					FROM = { NOT = { tag = GER } }
				}
				ROOT = {
					if = {
						limit = { tag = ZIM }
						set_cosmetic_tag = ZIM
					}
					if = {
						limit = { tag = NMB }
						set_cosmetic_tag = NMB
					}
					if = {
						limit = { tag = TOG }
						set_cosmetic_tag = TOG
					}
					if = {
						limit = { tag = SAF }
						set_cosmetic_tag = SAF
					}
					if = {
						limit = { tag = UGA }
						set_cosmetic_tag = UGA
					}
				}
			}
		
		}
	
	}
	on_liberate = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = GER_ZIM_IMP
							has_cosmetic_tag = GER_NMB
							has_cosmetic_tag = GER_TOG
							has_cosmetic_tag = GER_SAF_IMP
							has_cosmetic_tag = GER_UGA_IMP
						}
					}
				}
				ROOT = {
					if = {
						limit = { tag = ZIM }
						set_cosmetic_tag = ZIM
					}
					if = {
						limit = { tag = NMB }
						set_cosmetic_tag = NMB
					}
					if = {
						limit = { tag = TOG }
						set_cosmetic_tag = TOG
					}
					if = {
						limit = { tag = SAF }
						set_cosmetic_tag = SAF
					}
					if = {
						limit = { tag = UGA }
						set_cosmetic_tag = UGA
					}

				}
			}
		
		}
	
	}
	############################
	##	French Puppets Africa ##						
	############################
	on_subject_free = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = FRA_MEA
							has_cosmetic_tag = FRA_AFR
							has_cosmetic_tag = FRA_MAFR
							has_cosmetic_tag = FRA_EAFR
						}
					}
					FROM = { tag = FRA }
				}
				ROOT = {
					if = {
						limit = { tag = MLI }
						set_cosmetic_tag = MLI
					}
					if = {
						limit = { tag = SYR }
						set_cosmetic_tag = SYR
					}
					if = {
						limit = { tag = CHA }
						set_cosmetic_tag = CHA
					}
					if = {
						limit = { tag = MAD }
						set_cosmetic_tag = MAD
					}
				}
			}
		
		}
	
	}
	on_puppet = {
	
		effect = {
		
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = FRA_MEA
							has_cosmetic_tag = FRA_AFR
							has_cosmetic_tag = FRA_MAFR
							has_cosmetic_tag = FRA_EAFR
						}
					}
					FROM = { NOT = { tag = FRA } }
				}
				ROOT = {
					if = {
						limit = { tag = MLI }
						set_cosmetic_tag = MLI
					}
					if = {
						limit = { tag = SYR }
						set_cosmetic_tag = SYR
					}
					if = {
						limit = { tag = CHA }
						set_cosmetic_tag = CHA
					}
					if = {
						limit = { tag = MAD }
						set_cosmetic_tag = MAD
					}
				}
			}
		
		}
	
	}
	on_liberate = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							has_cosmetic_tag = FRA_MEA
							has_cosmetic_tag = FRA_AFR
							has_cosmetic_tag = FRA_MAFR
							has_cosmetic_tag = FRA_EAFR
						}
					}
				}
				ROOT = {
					if = {
						limit = { tag = MLI }
						set_cosmetic_tag = MLI
					}
					if = {
						limit = { tag = SYR }
						set_cosmetic_tag = SYR
					}
					if = {
						limit = { tag = CHA }
						set_cosmetic_tag = CHA
					}
					if = {
						limit = { tag = MAD }
						set_cosmetic_tag = MAD
					}
				}
			}
		
		}
	
	}
	####################
	## State Transfer ##
	####################
	on_startup = { 
		effect = {
			every_country = {
				limit = {
					is_ai = no
				}
				set_variable = { ROOT.marked_states = 0 }
			}
		}
	}

	######################
	## Civilian Oil Use ##
	######################

#	on_startup = { 
#		effect = {
#			every_country = {
#				#limit = {
#				#	is_ai = no
#				#}
#				add_dynamic_modifier = {
#					modifier = r56rp_civoil_modifier
#				}
#			}
#			every_country = {
#				limit = {
#					num_of_civilian_factories < 10
#				}
#				set_variable = { r56rp_civoil_base_fuel_gain_modifier = 0 }
#			}
#			every_country = {
#				limit = {
#					num_of_civilian_factories > 10
#				}
#				add_to_temp_variable = { r56rp_factory_oil = num_of_factories }
#				divide_temp_variable = { r56rp_factory_oil = 30 }
#
#				add_to_temp_variable = { r56rp_manpower_oil = max_manpower_k }
#				divide_temp_variable = { r56rp_manpower_oil = 15000 }
#
#				multiply_temp_variable = { r56rp_factory_oil = -1 }
#				multiply_temp_variable = { r56rp_manpower_oil = -1 }
#
#				set_variable = { r56rp_civoil_base_fuel_gain_modifier = r56rp_factory_oil }
#				add_to_variable = { r56rp_civoil_base_fuel_gain_modifier = r56rp_manpower_oil }
#			}
#		}
#	}
#	on_weekly = {
#		effect = {
#			every_country = {
#				limit = {
#					num_of_controlled_factories < 15
#				}
#				set_variable = { r56rp_civoil_base_fuel_gain_modifier = 0 }
#			}
#			every_country = {
#				limit = {
#					num_of_controlled_factories > 15
#				}
#				add_to_temp_variable = { r56rp_factory_oil = num_of_factories }
#				divide_temp_variable = { r56rp_factory_oil = 15 }
#
#				add_to_temp_variable = { r56rp_manpower_oil = max_manpower_k }
#				divide_temp_variable = { r56rp_manpower_oil = 2500 }
#
#				multiply_temp_variable = { r56rp_factory_oil = -1 }
#				multiply_temp_variable = { r56rp_manpower_oil = -1 }
#
#				set_variable = { r56rp_civoil_base_fuel_gain_modifier = r56rp_factory_oil }
#				add_to_variable = { r56rp_civoil_base_fuel_gain_modifier = r56rp_manpower_oil }
#				#round_variable = r56rp_civoil_base_fuel_gain_modifier
#				#log = "Current fuel consumption: [?THIS.r56rp_civoil_base_fuel_gain_modifier]"
#			}
#		}
#	}

	########################
	## Axis Pack Reminder ##
	########################
	on_startup = {
		effect = {
			every_country = {
				limit = {
					has_dlc = "Axis Armor Pack"
					has_game_rule = {
						rule = r56rp_enable_bakedinrules
						option = ENABLED
					}
				}
				set_country_flag = r56rp_disable_axis_armor_pack_flag
				activate_mission = r56rp_disable_axis_armor_pack
			}
			random_country = {
				limit = {
					has_dlc = "Axis Armor Pack"
					has_game_rule = {
						rule = r56rp_enable_bakedinrules
						option = ENABLED
					}
				}
				news_event = { 
					id = r56rp_rules_event.1 
				}
			}
		}
	}

	#######################################
	## Unlock Techs for Research Changes ##
	#######################################
	on_startup = { #warlider being lazy/genius
		effect = {
			every_country = {
				limit = {
					OR = {
						has_tech = shocktroops
						has_tech = marines
						has_tech = tech_mountaineers
						has_tech = paratroopers
					}
					NOT = {
						has_tech = tech_special_forces
					}
				}
				hidden_effect = {
					set_technology = {
						tech_special_forces = 1
						popup = no
					}
				}
			}
		}
	}
	####################
	## Embargo - Mod+ ##
	####################
	on_annex = {
		effect = {
			every_country = {
				limit = {
					FROM = {
						is_in_array = {
							array = PREV.embargoed_countries
							value = THIS.id
						}
					}
				}
			}
		}
	}

	####################
	## More Mapmodes+ ##
	####################

	on_weekly = { 
		effect = {
			if = {
				limit = {
					owns_state = 1
				}
				more_mapmodes_update_custom_map_modes_effects = yes
			}
		}
	}

	# ROOT is winner, FROM gets annexed
	on_annex = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is subject, FROM is overlord
	on_subject_annexed = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is new controller, FROM is old controller, FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is winner, FROM is loser
	on_peaceconference_ended = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the nation being liberated, FROM the leader of the liberators
	on_liberate = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the released nation, FROM the releaser
	on_release_as_free = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the released subject, FROM the former overlord
	on_subject_free = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the released nation, FROM the releaser
	on_release_as_puppet = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	on_war = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	on_peace = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the loser, FROM is the winner
	on_capitulation = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	on_uncapitulation = {
		effect = {
			more_mapmodes_update_custom_map_modes_effects = yes
		}
	}

	# ROOT is the country that guarantees, FROM is the country that gets guaranteed
	on_guarantee = {
		effect = {
			force_update_map_mode = {
				mapmode = more_mapmodes_guarantees_map_mode
			}
		}
	}

	#######################################
	## Subject Freedom/Subject Decisions ##
	#######################################

	on_subject_free = { #ROOT is subject FROM is previous overlord
		effect = {
			if = {
				limit = {
				has_idea = subject_military_restrictions
				}
			remove_ideas = subject_military_restrictions
			}
			if = {
				limit = {
					#AND = {
					has_idea = cant_train_divisions
					#NOT = { has_idea = subject_military_restrictions }
					#}
				}
				country_lock_all_division_template = no
				remove_ideas = cant_train_divisions
			}
		}
	}
	
	on_monthly = {
		effect = {
			if = {
				limit = {
					AND = {
					has_idea = cant_train_divisions
					NOT = { has_idea = subject_military_restrictions }
					}
				}
			country_lock_all_division_template = no
			remove_ideas = cant_train_divisions
			}
		}
	}
}